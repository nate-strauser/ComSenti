'''Externally defined basic sentiments for algorithm operations'''import logging as logimport adjectives as adjimport osdef register(SENTIMENTS):    SENTIMENTS['+'] = sentiment_positive_token    SENTIMENTS['-'] = sentiment_negative_token    SENTIMENTS['*'] = sentiment_overall_tokenclass sentiment_positive_token(object):    def nud(self):        return 0    def led(self, text):        #extract dictionary from a data file        adjectives = adj.filetodict(os.path.realpath('./data/adjectives.dat'))             #analyze text to get rating value        log.info("Executing analyzer")        try:            value = 0            #currently just searching for text and adding and subtracting            #but a different mechanism must be implemented that would look for negatives and comparisons            #eliminate from the text the items found so they are not counted again            #for example "not good" and "good" in the same text                        for k, v in adjectives.iteritems():               count = text.count(k)               if count > 0:                   value = value + count * v            log.info("Analyzer found a sentiment value of [%s]", value)                        #verify against max and min            if value > 20:                value = 20            elif value < -20:                value = -20            log.info("After comparing against Maxim, Minim: [%s]", value)            return value                except Exception, e:            log.error("Error in the counter", e)            return 0class sentiment_negative_token(object):    def nud(self):        0    def led(self, text):        return 0class sentiment_overall_token(object):    def nud(self):        0    def led(self, text):        return 0