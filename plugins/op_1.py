'''Externally defined basic sentiments for algorithm operations'''import logging as logimport adjectives as adjimport osfrom google.appengine.api import memcache from models import *def register(SENTIMENTS):    SENTIMENTS['+'] = sentiment_positive_token    SENTIMENTS['-'] = sentiment_negative_token    SENTIMENTS['*'] = sentiment_overall_tokenclass sentiment_positive_token(object):    modtext = ""        def nud(self):        return 0    def led(self, text, company):        dictionary = memcache.get('ADJECTIVES')                if dictionary is None:            log.info('Load the cache with adjectives.')            #extract dictionary from the database            #and save it in cache as a dictionary object            dictionary = {}            adjectives = Word.all()                        for adjective in adjectives:                dictionary[adjective.word] = int(adjective.value)            #cache expiration is set to 1 hour                memcache.set('ADJECTIVES', dictionary, 60*60)            log.info('Loaded %d adjectives in the dictionary.', len(dictionary))                     #analyze text to get rating value        log.debug("Executing analyzer")        try:                        #currently just searching for text and adding and subtracting            #but a different mechanism must be implemented that would look for negatives and comparisons            #eliminate from the text the items found so they are not counted again            #for example "not good" and "good" in the same text            value = 0            newtext = text                        words = text.split()            for word in words:                #look for each word in the text if exists in the dictionary                if dictionary.has_key(word):                    log.debug("Found word in dictionary %s of %s", word, dictionary.get(word, 0))                    val = dictionary.get(word, 0)                    value = value + int(val)                                        #insert special characters around the adjectives to exclude from search                    #also to special format in the UI                    goodword = '['+word+']'                    badword = '{'+word+'}'                                        if value > 0:                        newtext = text.replace(word, goodword)                    elif value < 0:                        newtext = text.replace(word, badword)                            log.debug("Analyzer found a sentiment value of [%s]", value)                        #verify against max and min            if value > 20:                value = 20            elif value < -20:                value = -20            log.debug("After comparing against Maxim, Minim: [%s]", value)            self.modtext = newtext            return value                except Exception, e:            log.error("Error in the counter ", e)            return 0class sentiment_negative_token(object):    def nud(self):        0    def led(self, text, company):        returnclass sentiment_overall_token(object):    def nud(self):        0    def led(self, text, company):        return